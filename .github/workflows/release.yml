name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.07)"
        required: true
        type: string
      title:
        description: "Release title (e.g., Windows fixes new)"
        required: true
        type: string

permissions:
  contents: write
  actions: write
  deployments: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    environment: cueme

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # --- Auto-create tag (once) ---
      - name: Create version tag
        if: matrix.os == 'ubuntu-latest'
        run: |
          VERSION=${{ github.event.inputs.version }}
          echo "Creating tag $VERSION"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Create .env for packaged app
        shell: bash
        run: |
          echo "Creating .env file from secrets"
          cat > .env << 'EOF'
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          EOF
          echo "âœ… .env created"

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Clean npm cache and install deps
        shell: bash
        run: |
          rm -rf node_modules || true
          npm cache clean --force || true
          npm ci

      - name: Build Electron app
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Building for ${{ matrix.platform }}"
          npm run build
          if [ "${{ matrix.platform }}" = "mac" ]; then
            npx electron-builder --mac --publish never
          elif [ "${{ matrix.platform }}" = "win" ]; then
            npx electron-builder --win --publish never
          else
            npx electron-builder --linux --publish never
          fi

      # --- Upload built files to artifacts ---
      - name: Upload packaged app
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.platform }}
          path: dist/**/*
          if-no-files-found: error

  # --- Create GitHub Release and attach binaries ---
  create-release:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded files
        run: ls -R ./artifacts

      - name: Create GitHub release and upload binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: "${{ github.event.inputs.title }} (${{ github.event.inputs.version }})"
          body: "Automated release generated by GitHub Actions"
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
